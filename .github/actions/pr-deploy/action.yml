name: 'PR Deploy'
description: 'Automatically deploy pull requests to isolated Docker containers'
inputs:
  server_host:
    description: 'SSH host of the server'
    required: true
  server_username:
    description: 'SSH username'
    required: true
  server_password:
    description: 'SSH password'
    required: true
  server_port:
    description: 'SSH port'
    required: true
  ssh_private_key:
    description: 'SSH private key for authentication'
    required: false
  dir:
    description: 'Directory containing Dockerfile or start command'
    default: '.'
  dockerfile:
    description: 'Path to Dockerfile'
    required: false
  start_command:
    description: 'Command to start the application'
    required: false
  exposed_port:
    description: 'Port to expose in the container'
    required: true
  env:
    description: 'Environment variables for the container'
    required: false

runs:
  using: 'composite'
  steps:
    - name: SSH into server and deploy
      env:
        HOST: ${{ inputs.server_host }}
        USERNAME: ${{ inputs.server_username }}
        PASSWORD: ${{ inputs.server_password }}
        PORT: ${{ inputs.server_port }}
        SSH_PRIVATE_KEY: ${{ inputs.ssh_private_key }}
        DIR: ${{ inputs.dir }}
        DOCKERFILE: ${{ inputs.dockerfile }}
        START_COMMAND: ${{ inputs.start_command }}
        EXPOSED_PORT: ${{ inputs.exposed_port }}
        ENV_VARS: ${{ inputs.env }}
      run: |
        if [ -n "$SSH_PRIVATE_KEY" ]; then
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          SSH_CMD="ssh -i private_key.pem -o StrictHostKeyChecking=no -p $PORT $USERNAME@$HOST"
        else
          SSH_CMD="sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no -p $PORT $USERNAME@$HOST"
        fi
        
        $SSH_CMD << EOF      
          # REPO_DIR="${GITHUB_REPOSITORY##*/}-${GITHUB_HEAD_REF}"

          GITHUB_BRANCH = testingabas123
          git clone -b $GITHUB_BRANCH "https://github.com/Data-Bishop/flask-example.git" temp/
          cd temp
          
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker.io
          fi

          # Add current user to docker group
          # sudo usermod -aG docker $USER
          # newgrp docker

          # Find all container IDs with the specified branch label
          CONTAINERS=$(sudo docker ps -q --filter "label=branch=$GITHUB_BRANCH")

          # Loop through each container and stop and remove it
          while [ ! -z "$CONTAINERS" ]; do
              for CONTAINER_ID in $CONTAINERS; do
                  echo "Stopping container $CONTAINER_ID..."
                  docker stop $CONTAINER_ID
                  echo "Removing container $CONTAINER_ID..."
                  docker rm $CONTAINER_ID
              done
          done
          
          # Kill any existing SSH tunnels for this port
          pkill -f "ssh -R $EXPOSED_PORT:localhost:$EXPOSED_PORT serveo.net"
          
          if [ -n "$DOCKERFILE" ]; then
            docker build --label branch=$GITHUB_BRANCH -t $GITHUB_BRANCH .
            sudo docker run -d --label branch=$GITHUB_BRANCH -p $EXPOSED_PORT:$EXPOSED_PORT $GITHUB_BRANCH
          else
            sudo docker run -d -p $EXPOSED_PORT:$EXPOSED_PORT -v $(pwd)/$DIR:/app -w /app --name $REPO_DIR $ENV_VARS alpine sh -c "$START_COMMAND"
          fi
          
          # Remove images with the specified label
          IMAGES=$(docker images -q --filter "label=branch=$GITHUB_BRANCH")

          while [ ! -z "$IMAGES" ]; do
              for IMAGE_ID in $IMAGES; do
                  echo "Removing image $IMAGE_ID..."
                  docker rmi $IMAGE_ID
              done
          done

          cd ..
          rm -rf temp

          # Set up tunneling using Serveo with a random high-numbered port
          RANDOM_PORT=$((RANDOM % 10000 + 50000))
          nohup ssh -tt -o StrictHostKeyChecking=no -R $RANDOM_PORT:localhost:$EXPOSED_PORT serveo.net > serveo_output.log 2>&1 &
          sleep 30
          SERVEO_URL=$(grep -oP 'Forwarding.*?https://\K[^ ]+' serveo_output.log | tail -n 1)
          echo "Deployment URL: $SERVEO_URL"

        EOF
        
        if [ -n "$SSH_PRIVATE_KEY" ]; then
          sudo rm private_key.pem
        fi
      shell: bash
