name: 'PR Deploy'
description: 'Automatically deploy pull requests to isolated Docker containers'
inputs:
  server_host:
    description: 'SSH host of the server'
    required: true
  server_username:
    description: 'SSH username'
    required: true
  server_password:
    description: 'SSH password'
    required: false
  server_port:
    description: 'SSH port'
    required: true
  ssh_private_key:
    description: 'SSH private key for authentication'
    required: false
  dir:
    description: 'Directory containing Dockerfile or start command'
    default: '.'
  dockerfile:
    description: 'Path to Dockerfile'
    required: false
  docker_compose_file:
    description: 'Path to docker compose file'
    required: false
  start_command:
    description: 'Command to start the application'
    required: false
  exposed_port:
    description: 'Port to expose in the container'
    required: true
  env:
    description: 'Environment variables for the container'
    required: false

runs:
  using: 'composite'
  steps:
    - name: SSH into server and setup environment
      env:
        HOST: ${{ inputs.server_host }}
        USERNAME: ${{ inputs.server_username }}
        PASSWORD: ${{ inputs.server_password }}
        PORT: ${{ inputs.server_port }}
        SSH_PRIVATE_KEY: ${{ inputs.ssh_private_key }}
        DIR: ${{ inputs.dir }}
        DOCKERFILE: ${{ inputs.dockerfile }}
        DOCKER_COMPOSE_FILE: ${{ inputs.docker_compose_file }}
        START_COMMAND: ${{ inputs.start_command }}
        EXPOSED_PORT: ${{ inputs.exposed_port }}
        ENV_VARS: ${{ inputs.env }}
      run: |
        if [ -n "$SSH_PRIVATE_KEY" ]; then
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          SSH_CMD="ssh -i private_key.pem -o StrictHostKeyChecking=no -p $PORT $USERNAME@$HOST"
        else
          SSH_CMD="sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no -p $PORT $USERNAME@$HOST"
        fi
        
        $SSH_CMD << EOF      
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker.io
          fi

          if ! command -v python3 &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y python3
          fi

          # Add current user to docker group
          # sudo usermod -aG docker $USER
          # newgrp docker

          Loop through each container and stop and remove it
          CONTAINERS=$(sudo docker ps -aq --filter "label=branch=${GITHUB_HEAD_REF}")
          IMAGES=$(sudo docker images -q --filter "label=branch=${GITHUB_HEAD_REF}")

          echo "CONTAINERS: \$CONTAINERS"
          echo "IMAGES: \$IMAGES"

          for CONTAINER_ID in \$CONTAINERS; do
              echo "Stopping and removing container \$CONTAINER_ID..."
              sudo docker stop \$CONTAINER_ID
              sudo docker rm -f \$CONTAINER_ID
          done

          for IMAGE_ID in \$IMAGES; do
              echo "Removing image \$IMAGE_ID..."
              sudo docker rmi -f \$IMAGE_ID
          done

        EOF
        
        if [ -n "$SSH_PRIVATE_KEY" ]; then
          sudo rm private_key.pem
        fi
      shell: bash

    - name: SSH into server and deploy
      env:
        HOST: ${{ inputs.server_host }}
        USERNAME: ${{ inputs.server_username }}
        PASSWORD: ${{ inputs.server_password }}
        PORT: ${{ inputs.server_port }}
        SSH_PRIVATE_KEY: ${{ inputs.ssh_private_key }}
        DIR: ${{ inputs.dir }}
        DOCKERFILE: ${{ inputs.dockerfile }}
        DOCKER_COMPOSE_FILE: ${{ inputs.docker_compose_file }}
        START_COMMAND: ${{ inputs.start_command }}
        EXPOSED_PORT: ${{ inputs.exposed_port }}
        ENV_VARS: ${{ inputs.env }}
      run: chmod +x entrypoint.sh && ./entrypoint.sh
      shell: bash
